import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,a as t}from"./app.9d91b877.js";const e="/doc/assets/1.3-js-test.e606c5c4.png",p="/doc/assets/1.3-dom-test.b0668b05.png",o={},l=t(`<h1 id="vue-js-设计与实现" tabindex="-1"><a class="header-anchor" href="#vue-js-设计与实现" aria-hidden="true">#</a> Vue.js 设计与实现</h1><p>全书分六个篇章共十八个章节。主要针对 Vue.js 3.0 各个模块的介绍。</p><h1 id="第一篇-框架设计规范" tabindex="-1"><a class="header-anchor" href="#第一篇-框架设计规范" aria-hidden="true">#</a> 第一篇 框架设计规范</h1><h2 id="第-1-章-权衡的艺术" tabindex="-1"><a class="header-anchor" href="#第-1-章-权衡的艺术" aria-hidden="true">#</a> 第 1 章 权衡的艺术</h2><ul><li>命令式和声明式两种规范的差异，以及两者对框架设计的影响</li><li>虚拟 DOM 的性能状况</li><li>Vue.js 3.0 是<strong>运行时和编译时框架</strong></li></ul><h3 id="_1-1-命令式和声明式" tabindex="-1"><a class="header-anchor" href="#_1-1-命令式和声明式" aria-hidden="true">#</a> 1.1 命令式和声明式</h3><p>从范式来开，视图层框架分为命令式和声明式，两者各有优缺点。早期的 Jquery 是命令式框架。</p><p>举个 🌰：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 获取 id 为 app 的 div 标签
 * 文本内容为 hello world
 * 绑定事件
 * 点击 alert(&#39;ok&#39;)
 */</span>

<span class="token comment">// Jquery 实现</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 获取 标签</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 设置内容</span>
  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 绑定事件</span>


<span class="token comment">// JavaScript 实现</span>
<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 获取 标签</span>
div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;hellow world&#39;</span> <span class="token comment">// 设置内容</span>
div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 绑定事件</span>


<span class="token comment">// Vue 实现</span>
<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span> @click<span class="token operator">=</span><span class="token string">&quot;() =&gt; alert(&#39;ok&#39;)&quot;</span> <span class="token operator">&gt;</span>hello world<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上述 🌰 得出：</p><ul><li>命令式关注的是程序实现的<strong>过程</strong></li><li>声明式关注的是程序的<strong>最终结果</strong></li></ul><div class="custom-container tip"><p class="custom-container-title">提示</p><p>当然 Vue.js 不可能单单使用声明式，内部代码还是原生 JS 实现，也就是<strong>命令式</strong>，然而暴露给用户的则是<strong>声明式</strong>。所以 Vue.js 是一个<strong>命令式+声明式</strong>框架。</p></div><h3 id="_1-2-性能与可维护的权衡" tabindex="-1"><a class="header-anchor" href="#_1-2-性能与可维护的权衡" aria-hidden="true">#</a> 1.2 性能与可维护的权衡</h3><p><strong>声明式代码的性能不优于命令式代码的性能</strong></p><p>上述 🌰 来说，修改 div 标签内容为 hello vue3。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">// 命令式</span>
 div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;hello vue3&#39;</span>
 
 <span class="token comment">// 声明式</span>
 <span class="token comment">// 修改之前</span>
 <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span> @click<span class="token operator">=</span><span class="token string">&quot;() =&gt; alert(&#39;ok&#39;)&quot;</span> <span class="token operator">&gt;</span>hello world<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
 <span class="token comment">// 修改之后</span>
 <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span> @click<span class="token operator">=</span><span class="token string">&quot;() =&gt; alert(&#39;ok&#39;)&quot;</span> <span class="token operator">&gt;</span>hello vue3<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>命令式代码：明确结果，只要调用相关命令操作即可</p></li><li><p>声明式代码：首先要找到前后的差异，然后再去更新最终使用的还是命令是代码</p></li></ul><p>如果把直接修改的性能定义为 A，找出差异的代码性能定义为 B，可得出：</p><ul><li>命令式代码的性能消耗：A</li><li>声明式代码的性能消耗：B + A <ul><li><strong>声明式代码的性能消耗 = 找出差异的性能消耗 + 直接修改的性能消耗</strong></li></ul></li></ul><p>由上看出，声明式的性能消耗会比命令式的性能消耗多出找出差异的性能消耗。<strong>框架本身是封装了命令式代码实现面向用户的声明式。</strong></p><p>选择生命是的原因：声明式代码用户维护性更强，如果使用命令式我们需要<strong>维护整个代码过程</strong>。</p><h3 id="_1-3-虚拟-dom-的性能" tabindex="-1"><a class="header-anchor" href="#_1-3-虚拟-dom-的性能" aria-hidden="true">#</a> 1.3 虚拟 DOM 的性能</h3><p>上小节说到 <strong>声明式代码的性能消耗 = 找出差异的性能消耗 + 直接修改的性能消耗</strong>。如果将找出差异的性能降到最低，接近于 0 的话，那么声明式性能消耗就会约等于命令式性能消耗。</p><p>虚拟 DOM 就是为了<strong>最小化找出差异的性能消耗</strong>。</p><p><img src="`+e+'" alt="js"> <img src="'+p+'" alt="dom"></p><p>由上图看出，纯 JS 的操作比操作 DOM 的使用时间要快的多。</p><p>可以使用公式表达：<strong>innerHtml 创建页面性能 = HTML 字符串拼接的计算量 + innerHTML 的 DOM 计算量</strong></p><p>虚拟 DOM 创建页面过程分为两步：</p><ol><li>创建 JS 对象，理解为真实 DOM 的描述</li><li>递归遍历虚拟 DOM 树并创建真实 DOM</li></ol><p>用公式表达：<strong>虚拟 DOM 创建页面 = 创建 JS 对象的计算量 + 创建真实 DOM 的计算量</strong></p><table><thead><tr><th>运算方式</th><th>虚拟 DOM</th><th>innerHtml</th></tr></thead><tbody><tr><td>纯 JS 运算</td><td>创建 JS 对象(VNode)</td><td>渲染 HTML 字符串</td></tr><tr><td>DOM 运算</td><td>新建所有 DOM</td><td>新建所有 DOM</td></tr></tbody></table><p>由上表格可以看出其实新建页面时两种运算方式最终都需要新建所有 DOM。在同一个数量级，可能差异会很小。 如果是更新呢？</p>',32),i=[l];function c(r,d){return s(),a("div",null,i)}const v=n(o,[["render",c],["__file","《Vue.js 设计与实现》.html.vue"]]);export{v as default};
