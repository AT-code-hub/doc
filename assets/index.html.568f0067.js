import{_ as t,o as d,c as e,a}from"./app.4ee7bcf1.js";const i={},c=a(`<h1 id="掌握-git" tabindex="-1"><a class="header-anchor" href="#掌握-git" aria-hidden="true">#</a> 掌握 GIT</h1><h2 id="初始配置" tabindex="-1"><a class="header-anchor" href="#初始配置" aria-hidden="true">#</a> 初始配置</h2><p>配置文件的位置 <code>~/.gitconfig</code>，第一次执行任何 Git 命令时会自动创建 <code>.gitconfig</code> 文件。</p><p>配置基本信息:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">&#39;AT&#39;</span>  <span class="token comment">// 配置用户名</span>
    git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">&#39;at_emailbox@163.com&#39;</span> <span class="token comment">// 配置账户邮箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="入门" tabindex="-1"><a class="header-anchor" href="#入门" aria-hidden="true">#</a> 入门</h2><h3 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令" aria-hidden="true">#</a> 基本命令</h3><table><thead><tr><th>命令</th><th>解析</th></tr></thead><tbody><tr><td>git init</td><td>初始化仓库</td></tr><tr><td>git clone url</td><td>克隆仓库</td></tr><tr><td>git clone -b [branch] url</td><td>克隆指定分支代码</td></tr><tr><td>git status</td><td>查看状态</td></tr><tr><td>git add xxx.html</td><td>提交单个文件</td></tr><tr><td>git add .</td><td>提交所有文件</td></tr><tr><td>git commit -m &#39;xxxx&#39;</td><td>提交到仓库中</td></tr><tr><td>git commit -a -m &#39;xxxx&#39;</td><td>提交已经跟踪过的文件，不需要执行 add</td></tr><tr><td>git rm xxx.html</td><td>删除版本库与项目目录中的文件</td></tr><tr><td>git rm --cached xxx.html</td><td>只删除版本库中文件</td></tr><tr><td>git commit --amend</td><td>修改最后一次提交</td></tr></tbody></table><h2 id="工作区" tabindex="-1"><a class="header-anchor" href="#工作区" aria-hidden="true">#</a> 工作区</h2><p><code>git clean</code> 命令用来从工作目录中删除所有没有跟踪过得代码</p><ul><li><code>git clean -n</code> 会提示那些文件被删除</li><li><code>git clean -f</code> 删除当前目录中没有被跟踪过得文件，不会删除 <code>.gitignore</code> 指定的文件</li><li><code>git clean -df</code> 删除当前目录中没有被 tracked 过得文件和文件夹</li><li><code>git checkout .</code> 将没有放入到暂存区的所有文件恢复，执行后恢复到上一次提交前的状态</li><li><code>git checkout xxx</code> 放弃指定文件修改，执行后恢复到上一次提交前的状态</li><li><code>git checkout -- xxx</code> 将文件从暂存区恢复（如果没有提交到暂存区，将恢复到最近一次提交状态）</li></ul><h2 id="暂存区" tabindex="-1"><a class="header-anchor" href="#暂存区" aria-hidden="true">#</a> 暂存区</h2><ul><li><code>git add .</code> 提交所有文件（修改、新增）到暂存区</li><li><code>git add -u</code> 提交修改文件不提交新文件</li><li><code>git ls-files -s</code> 查看暂存区文件列表</li><li><code>git cat-file -p 散列值</code> 查看暂存区文件内容</li><li><code>git reset</code> 撤销上次提交</li></ul>`,13),n=[c];function r(o,s){return d(),e("div",null,n)}const h=t(i,[["render",r],["__file","index.html.vue"]]);export{h as default};
