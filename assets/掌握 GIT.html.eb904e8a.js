import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as d,a as t}from"./app.9d91b877.js";const a="/doc/assets/git-log-curstom.c607c2a3.png",l={},c=t(`<h1 id="掌握-git" tabindex="-1"><a class="header-anchor" href="#掌握-git" aria-hidden="true">#</a> 掌握 GIT</h1><h2 id="初始配置" tabindex="-1"><a class="header-anchor" href="#初始配置" aria-hidden="true">#</a> 初始配置</h2><p>配置文件的位置 <code>~/.gitconfig</code>，第一次执行任何 Git 命令时会自动创建 <code>.gitconfig</code> 文件。</p><p>配置基本信息:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">&#39;AT&#39;</span>  <span class="token comment">// 配置用户名</span>
    git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">&#39;at_emailbox@163.com&#39;</span> <span class="token comment">// 配置账户邮箱</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="入门" tabindex="-1"><a class="header-anchor" href="#入门" aria-hidden="true">#</a> 入门</h2><h3 id="基本命令" tabindex="-1"><a class="header-anchor" href="#基本命令" aria-hidden="true">#</a> 基本命令</h3><table><thead><tr><th>命令</th><th>解析</th></tr></thead><tbody><tr><td>git init</td><td>初始化仓库</td></tr><tr><td>git clone url</td><td>克隆仓库</td></tr><tr><td>git clone -b [branch] url</td><td>克隆指定分支代码</td></tr><tr><td>git status</td><td>查看状态</td></tr><tr><td>git add xxx.html</td><td>提交单个文件</td></tr><tr><td>git add .</td><td>提交所有文件</td></tr><tr><td>git commit -m &#39;xxxx&#39;</td><td>提交到仓库中</td></tr><tr><td>git commit -a -m &#39;xxxx&#39;</td><td>提交已经跟踪过的文件，不需要执行 add</td></tr><tr><td>git rm xxx.html</td><td>删除版本库与项目目录中的文件</td></tr><tr><td>git rm --cached xxx.html</td><td>只删除版本库中文件</td></tr><tr><td>git commit --amend</td><td>修改最后一次提交</td></tr></tbody></table><h2 id="工作区" tabindex="-1"><a class="header-anchor" href="#工作区" aria-hidden="true">#</a> 工作区</h2><p><code>git clean</code> 命令用来从工作目录中删除所有没有跟踪过得代码</p><ul><li><code>git clean -n</code> 会提示那些文件被删除</li><li><code>git clean -f</code> 删除当前目录中没有被跟踪过得文件，不会删除 <code>.gitignore</code> 指定的文件</li><li><code>git clean -df</code> 删除当前目录中没有被 tracked 过得文件和文件夹</li><li><code>git checkout .</code> 将没有放入到暂存区的所有文件恢复，执行后恢复到上一次提交前的状态</li><li><code>git checkout xxx</code> 放弃指定文件修改，执行后恢复到上一次提交前的状态</li><li><code>git checkout -- xxx</code> 将文件从暂存区恢复（如果没有提交到暂存区，将恢复到最近一次提交状态）</li></ul><h2 id="暂存区" tabindex="-1"><a class="header-anchor" href="#暂存区" aria-hidden="true">#</a> 暂存区</h2><ul><li><code>git add .</code> 提交所有文件（修改、新增）到暂存区</li><li><code>git add -u</code> 提交修改文件不提交新文件</li><li><code>git ls-files -s</code> 查看暂存区文件列表</li><li><code>git cat-file -p 散列值</code> 查看暂存区文件内容</li><li><code>git reset</code> 撤销上次提交</li></ul><h2 id="日志" tabindex="-1"><a class="header-anchor" href="#日志" aria-hidden="true">#</a> 日志</h2><ul><li><code>git log</code> 查看日志</li><li><code>git log -p -2</code> 查看最近两次提交日志并显示文件差异</li><li><code>git log --name-only</code> 显示已修改的文件清单</li><li><code>git log --name-status</code> 显示新增、修改、删除的文件</li><li><code>git log --oneline</code> 一行显示并只显示 SHA-1 的前几个字符</li><li><code>git log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit</code> 自定义日志信息：如下图</li></ul><p><img src="`+a+`" alt="git log"></p><h2 id="分支" tabindex="-1"><a class="header-anchor" href="#分支" aria-hidden="true">#</a> 分支</h2><ul><li><code>git branch dev</code> 创建 dev 分支</li><li><code>git branch [-a]</code> 查看分支加上 -a 可展示远程分支</li><li><code>git checkout dev</code> 切换到 dev 分支</li><li><code>git checkout -b dev</code> 创建 dev 分支的同时切换到 dev 分支</li><li><code>git branch -m main master</code> 将 main 分支名改为 master</li><li><code>git checkout dev | git merge master</code> 在 dev 分支上 合并 master 的分支</li><li><code>git branch -d dev</code> 删除本地 dev 分支</li><li><code>git push origin :dev</code> 删除远程 dev 分支</li><li><code>git branch --no-merged</code> 查看未合并当前分支代码的其他分支</li><li><code>git branch --merged</code> 查看已合并当前分支的其他分支</li></ul><h2 id="reset" tabindex="-1"><a class="header-anchor" href="#reset" aria-hidden="true">#</a> reset</h2><blockquote><p>使用 reset 可以恢复到历史提交点，重置暂存区与工作目录的内容</p></blockquote><h3 id="可选参数" tabindex="-1"><a class="header-anchor" href="#可选参数" aria-hidden="true">#</a> 可选参数</h3><ul><li>--hard 重置的同时，直接将 working tree 工作目录、index 暂存区 及 repository 仓库都重置成 reset 目标节点的内容</li><li>--soft 重置的同时，保留工作目录和暂存区的内容，只让仓库中的内容和 reset 目标节点内容一致</li><li>--mixed (默认选项) 重置的同时，只保留工作目录的内容，将暂存区和仓库中的内容重置成 reset 目标节点的内容</li></ul><h4 id="使用" tabindex="-1"><a class="header-anchor" href="#使用" aria-hidden="true">#</a> 使用</h4><ul><li><code>git reset</code> 将 add 到暂存区的内容回退</li><li><code>git reset --haed 9a122b7233eb653f3effc1773f1e962815e968e8</code> 回退到指定提交版本，重置 stage 和工作区的内容</li><li><code>git reset --hard HEAD^^^</code> 恢复前三个版本</li><li><code>git reset --soft</code> 保留工作区内容，只回退 commit。工作目录和暂存区内容一致，仓库内容重置</li><li><code>git reset HEAD -- .</code> 撤销暂存区文件</li><li><code>git reset --hard</code> 清空工作区和暂存区改动</li><li><code>git reset HEAD xxx.txt</code> 放弃 add 到暂存区的指定文件</li></ul><h2 id="定义别名" tabindex="-1"><a class="header-anchor" href="#定义别名" aria-hidden="true">#</a> 定义别名</h2><h3 id="git-配置文件中-gitconfig" tabindex="-1"><a class="header-anchor" href="#git-配置文件中-gitconfig" aria-hidden="true">#</a> git 配置文件中 ~/.gitconfig</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[alias]
   a = add .
   c = commit
   s = status
   l = log
   b = branch
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="环境变量" tabindex="-1"><a class="header-anchor" href="#环境变量" aria-hidden="true">#</a> 环境变量</h3><blockquote><p>window 修改~/.bashrc 或 ~/.bash_profile。</p><p>mac/linux 修改 ~/.zshrc 文件中定义常用的别名指令，需要首先安装 zsh 命令行扩展</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>alias gs=&quot;git status&quot;
alias gc=&quot;git commit -m &quot;
alias gl=&quot;git log --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;
alias gb=&quot;git branch&quot;
alias ga=&quot;git add -A&quot;
alias go=&quot;git checkout&quot;
alias gp=&quot;git push;git push github&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="忽略文件-gitignore" tabindex="-1"><a class="header-anchor" href="#忽略文件-gitignore" aria-hidden="true">#</a> 忽略文件 .gitignore</h2><ul><li>所有空行或者以注释符号 <code>＃</code> 开头的行都会被 Git 忽略。</li><li>匹配模式最后跟反斜杠<code>/</code>说明要忽略的是目录。</li><li>glob 模式匹配</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.env
/node_modules
/dist
*.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="暂存-stash" tabindex="-1"><a class="header-anchor" href="#暂存-stash" aria-hidden="true">#</a> 暂存 stash</h2><ul><li><code>git stash</code> 将现有更改暂存</li><li><code>git stash list</code> 查看暂存列表</li><li><code>git stash apply</code> 应用最近的暂存内容</li><li><code>git stash apply stash@{2}</code> 应用更早的暂存内容</li><li><code>git stash drop stash@{0}</code> 删除暂存内容（不推荐）</li><li><code>git stash pop</code> 应用并删除暂存内容（推荐）</li></ul><h2 id="标签-tag" tabindex="-1"><a class="header-anchor" href="#标签-tag" aria-hidden="true">#</a> 标签 Tag</h2><ul><li><code>git tag v1.0</code> 添加标签</li><li><code>git tag</code> 查看所有标签</li><li><code>git push --tags</code> 推送标签</li><li><code>git tag -d v1.0</code> 删除本地仓库标签</li><li><code>git push origin :v1.0</code> 删除远程标签</li></ul><h2 id="打包成-zip" tabindex="-1"><a class="header-anchor" href="#打包成-zip" aria-hidden="true">#</a> 打包成 zip</h2><p>将 master 分支打包成压缩包 <code>git archive master --prefix=&#39;at/&#39; --format=zip &gt; at.zip</code></p><h2 id="ssh-秘钥" tabindex="-1"><a class="header-anchor" href="#ssh-秘钥" aria-hidden="true">#</a> SSH 秘钥</h2><h3 id="生成秘钥" tabindex="-1"><a class="header-anchor" href="#生成秘钥" aria-hidden="true">#</a> 生成秘钥</h3><p>终端输入 <code>ssh-keygen -t rsa</code> 一直回车，会在 <code>~/.ssh</code> 生成<code>id_rsa</code> 秘钥和<code>id_rsa.pub</code> 公钥</p><h2 id="远程仓库" tabindex="-1"><a class="header-anchor" href="#远程仓库" aria-hidden="true">#</a> 远程仓库</h2><ul><li><code>git remote add origin [url]</code> 添加远程仓库地址</li><li><code>git remote -v</code> 查看远程仓库</li><li><code>git remote rm origin</code> 删除远程仓库地址</li><li><code>git remote show origin</code> 查看远程仓库地址</li><li><code>git remote ser-url origin [url]</code> 设置远程仓库地址</li></ul><h2 id="pull" tabindex="-1"><a class="header-anchor" href="#pull" aria-hidden="true">#</a> pull</h2><ul><li><code>git pull</code> 同步远程分支代码</li></ul><h2 id="push" tabindex="-1"><a class="header-anchor" href="#push" aria-hidden="true">#</a> push</h2><ul><li><code>git push origin master</code> 推送提交</li></ul>`,48),r=[c];function o(s,n){return i(),d("div",null,r)}const u=e(l,[["render",o],["__file","掌握 GIT.html.vue"]]);export{u as default};
