import{_ as n,o as s,c as a,a as t}from"./app.7bdacfa7.js";const e={},p=t(`<h1 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h1><p>全书分六个篇章共十八个章节。主要针对 Vue.js 3.0 各个模块的介绍。</p><h1 id="第一篇-框架设计规范" tabindex="-1"><a class="header-anchor" href="#第一篇-框架设计规范" aria-hidden="true">#</a> 第一篇 框架设计规范</h1><h2 id="第-1-章-权衡的艺术" tabindex="-1"><a class="header-anchor" href="#第-1-章-权衡的艺术" aria-hidden="true">#</a> 第 1 章 权衡的艺术</h2><ul><li>命令式和声明式两种规范的差异，以及两者对框架设计的影响</li><li>虚拟 DOM 的性能状况</li><li>Vue.js 3.0 是<strong>运行时和编译时框架</strong></li></ul><h3 id="_1-1-命令式和声明式" tabindex="-1"><a class="header-anchor" href="#_1-1-命令式和声明式" aria-hidden="true">#</a> 1.1 命令式和声明式</h3><p>从范式来开，视图层框架分为命令式和声明式，两者各有优缺点。早期的 Jquery 是命令式框架。</p><p>举个 🌰：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token doc-comment comment">/**
 * 获取 id 为 app 的 div 标签
 * 文本内容为 hello world
 * 绑定事件
 * 点击 alert(&#39;ok&#39;)
 */</span>

<span class="token comment">// Jquery 实现</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#app&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 获取 标签</span>
  <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">&#39;hello world&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 设置内容</span>
  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 绑定事件</span>


<span class="token comment">// JavaScript 实现</span>
<span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;app&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 获取 标签</span>
div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;hellow world&#39;</span> <span class="token comment">// 设置内容</span>
div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 绑定事件</span>


<span class="token comment">// Vue 实现</span>
<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span> @click<span class="token operator">=</span><span class="token string">&quot;() =&gt; alert(&#39;ok&#39;)&quot;</span> <span class="token operator">&gt;</span>hello world<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由上述 🌰 得出：</p><ul><li>命令式关注的是程序实现的<strong>过程</strong></li><li>声明式关注的是程序的<strong>最终结果</strong></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>当然 Vue.js 不可能单单使用声明式，内部代码还是原生 JS 实现，也就是<strong>命令式</strong>，然而暴露给用户的则是<strong>声明式</strong>。所以 Vue.js 是一个<strong>命令式+声明式</strong>框架。</p></div><h3 id="_1-2-性能与可维护的权衡" tabindex="-1"><a class="header-anchor" href="#_1-2-性能与可维护的权衡" aria-hidden="true">#</a> 1.2 性能与可维护的权衡</h3><p>声明式代码的性能<strong>不优于</strong>命令式代码的性能</p><p>上述 🌰 来说，修改 div 标签内容为 hello vue3。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">// 命令式</span>
 div<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&#39;hello vue3&#39;</span>
 
 <span class="token comment">// 声明式</span>
 <span class="token comment">// 修改之前</span>
 <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span> @click<span class="token operator">=</span><span class="token string">&quot;() =&gt; alert(&#39;ok&#39;)&quot;</span> <span class="token operator">&gt;</span>hello world<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
 <span class="token comment">// 修改之后</span>
 <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span> @click<span class="token operator">=</span><span class="token string">&quot;() =&gt; alert(&#39;ok&#39;)&quot;</span> <span class="token operator">&gt;</span>hello vue3<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>命令式代码：明确结果，只要调用相关命令操作即可</p></li><li><p>声明式代码：首先要找到前后的差异，然后再去更新最终使用的还是命令是代码</p></li></ul><p>如果把直接修改的性能定义为 A，找出差异的代码性能定义为 B，可得出：</p><ul><li>命令式代码的性能消耗：A</li><li>声明式代码的性能消耗：B + A</li></ul>`,19),o=[p];function l(i,c){return s(),a("div",null,o)}const u=n(e,[["render",l],["__file","index.html.vue"]]);export{u as default};
